name: Build test and quality checks
on: [pull_request, push]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  Actions:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.owner.login != github.event.pull_request.base.repo.owner.login
    # https://github.com/actions/virtual-environments
    runs-on: ubuntu-latest
    steps:
    - name: Deploy DietPi-Website locally
      id: deploy
      run: bash -c "$(curl -sSf "https://raw.githubusercontent.com/MichaIng/DietPi-Website${GITHUB_REF#refs/heads}/deploy.bash")" bash .
    - name: Setup JRE for Nu Html Checker
      # https://github.com/actions/setup-java/releases
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        # https://github.com/adoptium
        java-version: '17'
        java-package: jre
        check-latest: true
    - name: Download Nu Html Checker
      run: curl -sSfLO 'https://github.com/validator/validator/releases/download/latest/vnu.jar'
    - name: Run Nu Html Checker to check HTML, CSS and SVG files
      run: find . -type f \( -name '*.html' -o -name '*.css' -o -name '*.svg' \) -exec java -jar vnu.jar --verbose --also-check-css --also-check-svg --filterpattern '.*“html”.*' {} +
    - name: Setup Python for PySpelling
      id: python
      if: always() && steps.deploy.outcome == 'success'
      # https://github.com/actions/setup-python/releases
      uses: actions/setup-python@v3
      with:
        # https://github.com/actions/python-versions/releases
        python-version: '3.10'
    - name: Install PySpelling
      id: pyspelling
      if: always() && steps.python.outcome == 'success'
      run: |
        { pip3 install -U pip setuptools wheel; pip3 install -U pyspelling; } &
        sudo apt-get -q update
        sudo apt-get -qq --no-install-recommends install aspell-en
    - name: Run PySpelling to check HTML files
      if: always() && steps.pyspelling.outcome == 'success'
      run: pyspelling -vc .spellcheck.yml
    - name: Download lychee
      id: lychee
      if: always() && steps.deploy.outcome == 'success'
      run: |
        curl -sSfL "$(curl -sSf 'https://api.github.com/repos/lycheeverse/lychee/releases/latest' | mawk -F\" '/"browser_download_url.*x86_64-unknown-linux-musl\.tar\.gz"/{print $4;exit}')" -o lychee.tar.gz
        tar xf lychee.tar.gz
    - name: Run lychee to check Markdown and HTML files
      if: always() && steps.lychee.outcome == 'success'
      run: ./lychee -En --cache --require-https --exclude '^https://twitter.com' -a 429 --github-token '${{ secrets.GITHUB_TOKEN }}' -X head -b '.' '**/*.md' '**/*.html'
